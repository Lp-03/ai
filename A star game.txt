import heapq

row = 9
col = 10 

def a_star(grid,src,dest):
    open_list = [(0,src,[])]
    closed_list = set()
    
    while open_list:
        f,(i,j),path = heapq.heappop(open_list)
        closed_list.add((i,j))
        
        if (i,j) == dest:
            return path+[(i,j)]
            
        for di in range(-1,2):
            for dj in range(-1,2):
                if di == 0 and dj == 0:
                    continue
                    
                new_i,new_j = di + i, dj+j 
                if(0<=new_i<row and 0<= new_j <col and grid[new_i][new_j]==1 and (new_i,new_j) not in closed_list):
                    g_new = f+1 if di==0 or dj == 0 else f + 1.414
                    h_new = abs(new_i-dest[0])+abs(new_j-dest[1])
                    # print("h_new",h_new)
                    # print("g_new",g_new)
                    f_new = g_new + h_new
                    # print("f_new",f_new)
                        
                    heapq.heappush(open_list,(f_new,(new_i,new_j),path+[(i,j)]))
                        
    return []
    

grid = [
    [1, 0, 1, 1, 1, 1, 0, 1, 1, 1],
    [1, 1, 1, 0, 1, 1, 1, 0, 1, 1],
    [1, 1, 1, 0, 1, 1, 0, 1, 0, 1],
    [1, 0, 1, 0, 1, 0, 0, 0, 0, 1],
    [1, 1, 1, 0, 1, 1, 1, 0, 1, 0],
    [1, 0, 1, 1, 1, 1, 0, 1, 0, 0],
    [1, 0, 0, 0, 0, 1, 0, 0, 0, 1],
    [1, 0, 1, 1, 1, 1, 0, 1, 1, 1],
    [1, 1, 1, 0, 0, 0, 1, 0, 0, 1]
]

# Define the source and destination
src = (8, 0)
dest = (0, 0)

# Run the A* search algorithm
path = a_star(grid, src, dest)

if len(path)!=0 :
    print("The shortest path is:", path)
else:
    print("There is no path from source to destination.")


                    
